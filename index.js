(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.css = factory());
}(this,

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(stylesheet) { return stylesheet; },
          ";",
          peg$literalExpectation(";", false),
          function(charset, imports, rules) {
                return {
                  type: "StyleSheet",
                  charset: extractOptional(charset, 1),
                  imports: extractList(imports, 0),
                  rules: extractList(rules, 0),
                  start: location().start.offset,
                  end: location().end.offset
                };
              },
          function(href, media) {
                return {
                  type: "ImportRule",
                  href: href,
                  media: media !== null ? media : []
                };
              },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(media, rules) {
                return {
                  type: "MediaRule",
                  media: media,
                  rules: rules
                };
              },
          ",",
          peg$literalExpectation(",", false),
          function(head, tail) { return buildList(head, tail, 2); },
          function(name) { return name; },
          function(selector, declarationsHead, declarationsTail) {
                return {
                  type: "PageRule",
                  selector: selector,
                  declarations: buildList(declarationsHead, declarationsTail, 2)
                };
              },
          ":",
          peg$literalExpectation(":", false),
          function(value) { return { type: "PseudoSelector", value: value }; },
          "/",
          peg$literalExpectation("/", false),
          function() { return "/"; },
          function() { return ","; },
          "+",
          peg$literalExpectation("+", false),
          function() { return "+"; },
          ">",
          peg$literalExpectation(">", false),
          function() { return ">"; },
          function(selectorsHead, selectorsTail, declarationsHead, declarationsTail) {
                return {
                  type: "RuleSet",
                  selectors: buildList(selectorsHead, selectorsTail, 2),
                  declarations: buildList(declarationsHead, declarationsTail, 2)
                };
              },
          function(left, combinator, right) {
                return {
                  type: "Selector",
                  combinator: combinator,
                  left: left,
                  right: right
                };
              },
          function(left, right) {
                return {
                  type: "Selector",
                  combinator: " ",
                  left: left,
                  right: right
                };
              },
          function(selector) { return selector; },
          function(element, qualifiers) {
                return {
                  type: "SimpleSelector",
                  element: element,
                  qualifiers: qualifiers,
                  start: location().start.offset,
                  end: location().end.offset
                };
              },
          function(qualifiers) {
                return {
                  type: "SimpleSelector",
                  element: "*",
                  qualifiers: qualifiers,
                  start: location().start.offset,
                  end: location().end.offset
                };
              },
          function(id) { return { type: "IDSelector", id: id }; },
          ".",
          peg$literalExpectation(".", false),
          function(class_) { return { type: "ClassSelector", "class": class_ }; },
          "*",
          peg$literalExpectation("*", false),
          "[",
          peg$literalExpectation("[", false),
          "=",
          peg$literalExpectation("=", false),
          "]",
          peg$literalExpectation("]", false),
          function(attribute, operatorAndValue) {
                return {
                  type: "AttributeSelector",
                  attribute: attribute,
                  operator: extractOptional(operatorAndValue, 0),
                  value: extractOptional(operatorAndValue, 2)
                };
              },
          ")",
          peg$literalExpectation(")", false),
          function(name, params) {
                    return {
                      type: "Function",
                      name: name,
                      params: params !== null ? [params[0]] : []
                    };
                  },
          function(name, value, prio) {
                return {
                  type: "Declaration",
                  name: name,
                  value: value,
                  important: prio !== null,
                  start: location().start.offset,
                  end: location().end.offset
                };
              },
          function(head, tail) { return buildExpression(head, tail); },
          function(quantity) {
                return {
                  type: "Quantity",
                  value: quantity.value,
                  unit: quantity.unit
                };
              },
          function(value) { return { type: "String", value: value }; },
          function(value) { return { type: "URI",    value: value }; },
          function(value) { return { type: "Ident",  value: value }; },
          function(name, params) {
                return { type: "Function", name: name, params: params };
              },
          function(value) { return { type: "Hexcolor", value: value }; },
          /^[0-9a-f]/i,
          peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
          /^[\x80-\uFFFF]/,
          peg$classExpectation([["\x80", "\uFFFF"]], false, false),
          "\\",
          peg$literalExpectation("\\", false),
          "\r\n",
          peg$literalExpectation("\r\n", false),
          /^[ \t\r\n\f]/,
          peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          /^[^\r\n\f0-9a-f]/i,
          peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
          function(ch) { return ch; },
          /^[_a-z]/i,
          peg$classExpectation(["_", ["a", "z"]], false, true),
          /^[_a-z0-9\-]/i,
          peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
          "\"",
          peg$literalExpectation("\"", false),
          /^[^\n\r\f\\"]/,
          peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false),
          function(nl) { return ""; },
          function(chars) {
                return chars.join("");
              },
          "'",
          peg$literalExpectation("'", false),
          /^[^\n\r\f\\']/,
          peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false),
          "/*",
          peg$literalExpectation("/*", false),
          /^[^*]/,
          peg$classExpectation(["*"], true, false),
          /^[^\/*]/,
          peg$classExpectation(["/", "*"], true, false),
          "-",
          peg$literalExpectation("-", false),
          function(prefix, start, chars) {
                return prefix + start + chars.join("");
              },
          function(chars) { return chars.join(""); },
          /^[+\-]/,
          peg$classExpectation(["+", "-"], false, false),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          "e",
          peg$literalExpectation("e", false),
          function() {
                return parseFloat(text());
              },
          /^[!#$%&*-[\]-~]/,
          peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false),
          "\n",
          peg$literalExpectation("\n", false),
          "\r",
          peg$literalExpectation("\r", false),
          "\f",
          peg$literalExpectation("\f", false),
          "a",
          peg$literalExpectation("a", true),
          "0",
          peg$literalExpectation("0", false),
          /^[Aa]/,
          peg$classExpectation(["A", "a"], false, false),
          function() { return "a"; },
          "c",
          peg$literalExpectation("c", true),
          /^[Cc]/,
          peg$classExpectation(["C", "c"], false, false),
          function() { return "c"; },
          "d",
          peg$literalExpectation("d", true),
          /^[Dd]/,
          peg$classExpectation(["D", "d"], false, false),
          function() { return "d"; },
          peg$literalExpectation("e", true),
          /^[Ee]/,
          peg$classExpectation(["E", "e"], false, false),
          function() { return "e"; },
          "g",
          peg$literalExpectation("g", true),
          /^[Gg]/,
          peg$classExpectation(["G", "g"], false, false),
          "\\g",
          peg$literalExpectation("\\g", true),
          function() { return "g"; },
          "h",
          peg$literalExpectation("h", true),
          /^[Hh]/,
          peg$classExpectation(["H", "h"], false, false),
          "\\h",
          peg$literalExpectation("\\h", true),
          function() { return "h"; },
          "i",
          peg$literalExpectation("i", true),
          /^[Ii]/,
          peg$classExpectation(["I", "i"], false, false),
          "\\i",
          peg$literalExpectation("\\i", true),
          function() { return "i"; },
          "k",
          peg$literalExpectation("k", true),
          /^[Kk]/,
          peg$classExpectation(["K", "k"], false, false),
          "\\k",
          peg$literalExpectation("\\k", true),
          function() { return "k"; },
          "l",
          peg$literalExpectation("l", true),
          /^[Ll]/,
          peg$classExpectation(["L", "l"], false, false),
          "\\l",
          peg$literalExpectation("\\l", true),
          function() { return "l"; },
          "m",
          peg$literalExpectation("m", true),
          /^[Mm]/,
          peg$classExpectation(["M", "m"], false, false),
          "\\m",
          peg$literalExpectation("\\m", true),
          function() { return "m"; },
          "n",
          peg$literalExpectation("n", true),
          /^[Nn]/,
          peg$classExpectation(["N", "n"], false, false),
          "\\n",
          peg$literalExpectation("\\n", true),
          function() { return "n"; },
          "o",
          peg$literalExpectation("o", true),
          /^[Oo]/,
          peg$classExpectation(["O", "o"], false, false),
          "\\o",
          peg$literalExpectation("\\o", true),
          function() { return "o"; },
          "p",
          peg$literalExpectation("p", true),
          /^[Pp]/,
          peg$classExpectation(["P", "p"], false, false),
          "\\p",
          peg$literalExpectation("\\p", true),
          function() { return "p"; },
          "r",
          peg$literalExpectation("r", true),
          /^[Rr]/,
          peg$classExpectation(["R", "r"], false, false),
          "\\r",
          peg$literalExpectation("\\r", true),
          function() { return "r"; },
          "s",
          peg$literalExpectation("s", true),
          /^[Ss]/,
          peg$classExpectation(["S", "s"], false, false),
          "\\s",
          peg$literalExpectation("\\s", true),
          function() { return "s"; },
          "t",
          peg$literalExpectation("t", true),
          /^[Tt]/,
          peg$classExpectation(["T", "t"], false, false),
          "\\t",
          peg$literalExpectation("\\t", true),
          function() { return "t"; },
          "u",
          peg$literalExpectation("u", true),
          /^[Uu]/,
          peg$classExpectation(["U", "u"], false, false),
          "\\u",
          peg$literalExpectation("\\u", true),
          function() { return "u"; },
          "x",
          peg$literalExpectation("x", true),
          /^[Xx]/,
          peg$classExpectation(["X", "x"], false, false),
          "\\x",
          peg$literalExpectation("\\x", true),
          function() { return "x"; },
          "z",
          peg$literalExpectation("z", true),
          /^[Zz]/,
          peg$classExpectation(["Z", "z"], false, false),
          "\\z",
          peg$literalExpectation("\\z", true),
          function() { return "z"; },
          peg$otherExpectation("whitespace"),
          peg$otherExpectation("<!--"),
          "<!--",
          peg$literalExpectation("<!--", false),
          peg$otherExpectation("-->"),
          "-->",
          peg$literalExpectation("-->", false),
          peg$otherExpectation("~="),
          "~=",
          peg$literalExpectation("~=", false),
          peg$otherExpectation("|="),
          "|=",
          peg$literalExpectation("|=", false),
          peg$otherExpectation("string"),
          function(string) { return string; },
          peg$otherExpectation("identifier"),
          function(ident) { return ident; },
          peg$otherExpectation("hash"),
          "#",
          peg$literalExpectation("#", false),
          function(name) { return "#" + name; },
          peg$otherExpectation("@import"),
          "@",
          peg$literalExpectation("@", false),
          peg$otherExpectation("@page"),
          peg$otherExpectation("@media"),
          peg$otherExpectation("@charset"),
          "@charset ",
          peg$literalExpectation("@charset ", false),
          peg$otherExpectation("!important"),
          "!",
          peg$literalExpectation("!", false),
          peg$otherExpectation("length"),
          function(value) { return { value: value, unit: "em" }; },
          function(value) { return { value: value, unit: "ex" }; },
          function(value) { return { value: value, unit: "px" }; },
          function(value) { return { value: value, unit: "cm" }; },
          function(value) { return { value: value, unit: "mm" }; },
          function(value) { return { value: value, unit: "in" }; },
          function(value) { return { value: value, unit: "pt" }; },
          function(value) { return { value: value, unit: "pc" }; },
          peg$otherExpectation("angle"),
          function(value) { return { value: value, unit: "deg"  }; },
          function(value) { return { value: value, unit: "rad"  }; },
          function(value) { return { value: value, unit: "grad" }; },
          peg$otherExpectation("time"),
          function(value) { return { value: value, unit: "ms" }; },
          function(value) { return { value: value, unit: "s"  }; },
          peg$otherExpectation("frequency"),
          function(value) { return { value: value, unit: "hz" }; },
          function(value) { return { value: value, unit: "kh" }; },
          peg$otherExpectation("percentage"),
          "%",
          peg$literalExpectation("%", false),
          function(value) { return { value: value, unit: "%" }; },
          peg$otherExpectation("number"),
          function(value) { return { value: value, unit: null }; },
          peg$otherExpectation("uri"),
          "(",
          peg$literalExpectation("(", true),
          function(url) { return url; },
          peg$otherExpectation("function"),
          peg$literalExpectation("(", false)
        ],

        peg$bytecode = [
          peg$decode("%;!/8#$;A0#*;A&/($8\": \"!!)(\"'#&'#"),
          peg$decode("%%;h/;#;b/2$2!\"\"6!7\"/#$+#)(#'#(\"'#&'#.\" &\"/\u02C2#$;].) &;^.# &;_0/*;].) &;^.# &;_&/\u029A$$%;\"/\xA7#$%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#0]*%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#&/#$+\")(\"'#&'#0\xB1*%;\"/\xA7#$%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#0]*%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#&/#$+\")(\"'#&'#&/\u016E$$%;+.) &;#.# &;&/\xA7#$%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#0]*%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#&/#$+\")(\"'#&'#0\xBD*%;+.) &;#.# &;&/\xA7#$%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#0]*%;^/3#$;]0#*;]&/#$+\")(\"'#&'#.= &%;_/3#$;]0#*;]&/#$+\")(\"'#&'#&/#$+\")(\"'#&'#&/*$8$:#$##! )($'#(#'#(\"'#&'#"),
          peg$decode("%;e/\x85#$;]0#*;]&/u$;b.# &;r/f$$;]0#*;]&/V$;$.\" &\"/H$2!\"\"6!7\"/9$$;]0#*;]&/)$8':$'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;g/\x90#$;]0#*;]&/\x80$;$/w$2%\"\"6%7&/h$$;]0#*;]&/X$$;+0#*;+&/H$2'\"\"6'7(/9$$;]0#*;]&/)$8(:)(\"%\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;%/\x8B#$%2*\"\"6*7+/<#$;]0#*;]&/,$;%/#$+#)(#'#(\"'#&'#0L*%2*\"\"6*7+/<#$;]0#*;]&/,$;%/#$+#)(#'#(\"'#&'#&/)$8\":,\"\"! )(\"'#&'#"),
          peg$decode("%;c/8#$;]0#*;]&/($8\":-\"!!)(\"'#&'#"),
          peg$decode("%;f/\u0100#$;]0#*;]&/\xF0$;'.\" &\"/\xE2$2%\"\"6%7&/\xD3$$;]0#*;]&/\xC3$;3.\" &\"/\xB5$$%2!\"\"6!7\"/A#$;]0#*;]&/1$;3.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2!\"\"6!7\"/A#$;]0#*;]&/1$;3.\" &\"/#$+#)(#'#(\"'#&'#&/I$2'\"\"6'7(/:$$;]0#*;]&/*$8):.)#&#\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2/\"\"6/70/A#;c/8$$;]0#*;]&/($8#:1#!!)(#'#(\"'#&'#"),
          peg$decode("%22\"\"6273/7#$;]0#*;]&/'$8\":4\" )(\"'#&'#.G &%2*\"\"6*7+/7#$;]0#*;]&/'$8\":5\" )(\"'#&'#"),
          peg$decode("%26\"\"6677/7#$;]0#*;]&/'$8\":8\" )(\"'#&'#.G &%29\"\"697:/7#$;]0#*;]&/'$8\":;\" )(\"'#&'#"),
          peg$decode("%;c/8#$;]0#*;]&/($8\":-\"!!)(\"'#&'#"),
          peg$decode("%;,/\u0145#$%2*\"\"6*7+/<#$;]0#*;]&/,$;,/#$+#)(#'#(\"'#&'#0L*%2*\"\"6*7+/<#$;]0#*;]&/,$;,/#$+#)(#'#(\"'#&'#&/\xE3$2%\"\"6%7&/\xD4$$;]0#*;]&/\xC4$;3.\" &\"/\xB6$$%2!\"\"6!7\"/A#$;]0#*;]&/1$;3.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2!\"\"6!7\"/A#$;]0#*;]&/1$;3.\" &\"/#$+#)(#'#(\"'#&'#&/J$2'\"\"6'7(/;$$;]0#*;]&/+$8(:<($'&#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;-/L#$;]0#*;]&/<$;)/3$;,/*$8$:=$##! )($'#(#'#(\"'#&'#.w &%;-/H#$;]/&#0#*;]&&&#/2$;,/)$8#:>#\"\" )(#'#(\"'#&'#.B &%;-/8#$;]0#*;]&/($8\":?\"!!)(\"'#&'#"),
          peg$decode("%;0/]#$;../ &;/.) &;1.# &;205*;../ &;/.) &;1.# &;2&/)$8\":@\"\"! )(\"'#&'#.` &%$;../ &;/.) &;1.# &;2/8#05*;../ &;/.) &;1.# &;2&&&#/' 8!:A!! )"),
          peg$decode("%;d/' 8!:B!! )"),
          peg$decode("%2C\"\"6C7D/1#;c/($8\":E\"! )(\"'#&'#"),
          peg$decode(";c.) &2F\"\"6F7G"),
          peg$decode("%2H\"\"6H7I/\xBA#$;]0#*;]&/\xAA$;c/\xA1$$;]0#*;]&/\x91$%2J\"\"6J7K.) &;`.# &;a/R#$;]0#*;]&/B$;c.# &;b/3$$;]0#*;]&/#$+$)($'#(#'#(\"'#&'#.\" &\"/8$2L\"\"6L7M/)$8&:N&\"#!)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2/\"\"6/70/\x8E#%;s/p#$;]0#*;]&/`$%;c/3#$;]0#*;]&/#$+\")(\"'#&'#.\" &\"/8$2O\"\"6O7P/)$8$:Q$\"#!)($'#(#'#(\"'#&'#.# &;c/($8\":1\"! )(\"'#&'#"),
          peg$decode("%;*/`#2/\"\"6/70/Q$$;]0#*;]&/A$;5/8$;4.\" &\"/*$8%:R%#$! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;i/3#$;]0#*;]&/#$+\")(\"'#&'#"),
          peg$decode("%;6/i#$%;(.\" &\"/,#;6/#$+\")(\"'#&'#0;*%;(.\" &\"/,#;6/#$+\")(\"'#&'#&/)$8\":S\"\"! )(\"'#&'#"),
          peg$decode("%;p.G &;l.A &;j.; &;k.5 &;m./ &;n.) &;o.# &;q/8#$;]0#*;]&/($8\":T\"!!)(\"'#&'#.\x98 &%;b/8#$;]0#*;]&/($8\":U\"!!)(\"'#&'#.s &%;r/8#$;]0#*;]&/($8\":V\"!!)(\"'#&'#.N &;7.H &;8.B &%;c/8#$;]0#*;]&/($8\":W\"!!)(\"'#&'#"),
          peg$decode("%;s/a#$;]0#*;]&/Q$;5/H$2O\"\"6O7P/9$$;]0#*;]&/)$8%:X%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;d/8#$;]0#*;]&/($8\":Y\"!!)(\"'#&'#"),
          peg$decode("4Z\"\"5!7["),
          peg$decode("4\\\"\"5!7]"),
          peg$decode("%2^\"\"6^7_/\xA8#%%;9/i#;9.\" &\"/[$;9.\" &\"/M$;9.\" &\"/?$;9.\" &\"/1$;9.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/\"!&,)/H$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/($8#:d#!!)(#'#(\"'#&'#"),
          peg$decode(";;.G &%2^\"\"6^7_/7#4e\"\"5!7f/($8\":g\"! )(\"'#&'#"),
          peg$decode("4h\"\"5!7i.) &;:.# &;<"),
          peg$decode("4j\"\"5!7k.) &;:.# &;<"),
          peg$decode("%2l\"\"6l7m/\xA7#$4n\"\"5!7o.G &%2^\"\"6^7_/1#;I/($8\":p\"! )(\"'#&'#.# &;<0S*4n\"\"5!7o.G &%2^\"\"6^7_/1#;I/($8\":p\"! )(\"'#&'#.# &;<&/7$2l\"\"6l7m/($8#:q#!!)(#'#(\"'#&'#"),
          peg$decode("%2r\"\"6r7s/\xA7#$4t\"\"5!7u.G &%2^\"\"6^7_/1#;I/($8\":p\"! )(\"'#&'#.# &;<0S*4t\"\"5!7u.G &%2^\"\"6^7_/1#;I/($8\":p\"! )(\"'#&'#.# &;<&/7$2r\"\"6r7s/($8#:q#!!)(#'#(\"'#&'#"),
          peg$decode("%2v\"\"6v7w/\u011C#$4x\"\"5!7y0)*4x\"\"5!7y&/\u0100$$2F\"\"6F7G/,#0)*2F\"\"6F7G&&&#/\xDE$$%4z\"\"5!7{/a#$4x\"\"5!7y0)*4x\"\"5!7y&/E$$2F\"\"6F7G/,#0)*2F\"\"6F7G&&&#/#$+#)(#'#(\"'#&'#0q*%4z\"\"5!7{/a#$4x\"\"5!7y0)*4x\"\"5!7y&/E$$2F\"\"6F7G/,#0)*2F\"\"6F7G&&&#/#$+#)(#'#(\"'#&'#&/2$22\"\"6273/#$+%)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%2|\"\"6|7}.\" &\"/\"!&,)/C#;=/:$$;>0#*;>&/*$8#:~##\"! )(#'#(\"'#&'#"),
          peg$decode("%$;>/&#0#*;>&&&#/' 8!:\x7F!! )"),
          peg$decode("%4\x80\"\"5!7\x81.\" &\"/\xF1#$4\x82\"\"5!7\x83/,#0)*4\x82\"\"5!7\x83&&&#.q &%$4\x82\"\"5!7\x830)*4\x82\"\"5!7\x83&/T#2C\"\"6C7D/E$$4\x82\"\"5!7\x83/,#0)*4\x82\"\"5!7\x83&&&#/#$+#)(#'#(\"'#&'#/{$%2\x84\"\"6\x847\x85/Y#4\x80\"\"5!7\x81.\" &\"/E$$4\x82\"\"5!7\x83/,#0)*4\x82\"\"5!7\x83&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8#:\x86# )(#'#(\"'#&'#"),
          peg$decode(";?.# &;@"),
          peg$decode("%$4\x87\"\"5!7\x88.) &;:.# &;<05*4\x87\"\"5!7\x88.) &;:.# &;<&/' 8!:\x7F!! )"),
          peg$decode("$4b\"\"5!7c/,#0)*4b\"\"5!7c&&&#"),
          peg$decode(";G.\" &\""),
          peg$decode("2\x89\"\"6\x897\x8A.A &2`\"\"6`7a.5 &2\x8B\"\"6\x8B7\x8C.) &2\x8D\"\"6\x8D7\x8E"),
          peg$decode("3\x8F\"\"5!7\x90.\xB6 &%2^\"\"6^7_/\xA6#2\x91\"\"6\x917\x92.\" &\"/\x92$2\x91\"\"6\x917\x92.\" &\"/~$2\x91\"\"6\x917\x92.\" &\"/j$2\x91\"\"6\x917\x92.\" &\"/V$4\x93\"\"5!7\x94/G$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/'$8':\x95' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("3\x96\"\"5!7\x97.\xB6 &%2^\"\"6^7_/\xA6#2\x91\"\"6\x917\x92.\" &\"/\x92$2\x91\"\"6\x917\x92.\" &\"/~$2\x91\"\"6\x917\x92.\" &\"/j$2\x91\"\"6\x917\x92.\" &\"/V$4\x98\"\"5!7\x99/G$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/'$8':\x9A' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("3\x9B\"\"5!7\x9C.\xB6 &%2^\"\"6^7_/\xA6#2\x91\"\"6\x917\x92.\" &\"/\x92$2\x91\"\"6\x917\x92.\" &\"/~$2\x91\"\"6\x917\x92.\" &\"/j$2\x91\"\"6\x917\x92.\" &\"/V$4\x9D\"\"5!7\x9E/G$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/'$8':\x9F' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("3\x84\"\"5!7\xA0.\xB6 &%2^\"\"6^7_/\xA6#2\x91\"\"6\x917\x92.\" &\"/\x92$2\x91\"\"6\x917\x92.\" &\"/~$2\x91\"\"6\x917\x92.\" &\"/j$2\x91\"\"6\x917\x92.\" &\"/V$4\xA1\"\"5!7\xA2/G$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/'$8':\xA3' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("3\xA4\"\"5!7\xA5.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xA6\"\"5!7\xA7/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xA8\"\"5\"7\xA9/& 8!:\xAA! )"),
          peg$decode("3\xAB\"\"5!7\xAC.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xAD\"\"5!7\xAE/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xAF\"\"5\"7\xB0/& 8!:\xB1! )"),
          peg$decode("3\xB2\"\"5!7\xB3.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xB4\"\"5!7\xB5/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xB6\"\"5\"7\xB7/& 8!:\xB8! )"),
          peg$decode("3\xB9\"\"5!7\xBA.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xBB\"\"5!7\xBC/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xBD\"\"5\"7\xBE/& 8!:\xBF! )"),
          peg$decode("3\xC0\"\"5!7\xC1.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xC2\"\"5!7\xC3/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xC4\"\"5\"7\xC5/& 8!:\xC6! )"),
          peg$decode("3\xC7\"\"5!7\xC8.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xC9\"\"5!7\xCA/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xCB\"\"5\"7\xCC/& 8!:\xCD! )"),
          peg$decode("3\xCE\"\"5!7\xCF.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xD0\"\"5!7\xD1/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xD2\"\"5\"7\xD3/& 8!:\xD4! )"),
          peg$decode("3\xD5\"\"5!7\xD6.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xD7\"\"5!7\xD8/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xD9\"\"5\"7\xDA/& 8!:\xDB! )"),
          peg$decode("3\xDC\"\"5!7\xDD.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xDE\"\"5!7\xDF/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xE0\"\"5\"7\xE1/& 8!:\xE2! )"),
          peg$decode("3\xE3\"\"5!7\xE4.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xE5\"\"5!7\xE6/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xE7\"\"5\"7\xE8/& 8!:\xE9! )"),
          peg$decode("3\xEA\"\"5!7\xEB.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xEC\"\"5!7\xED/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xEE\"\"5\"7\xEF/& 8!:\xF0! )"),
          peg$decode("3\xF1\"\"5!7\xF2.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xF3\"\"5!7\xF4/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xF5\"\"5\"7\xF6/& 8!:\xF7! )"),
          peg$decode("3\xF8\"\"5!7\xF9.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\xFA\"\"5!7\xFB/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\xFC\"\"5\"7\xFD/& 8!:\xFE! )"),
          peg$decode("3\xFF\"\"5!7\u0100.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\u0101\"\"5!7\u0102/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0103\"\"5\"7\u0104/& 8!:\u0105! )"),
          peg$decode("3\u0106\"\"5!7\u0107.\xC9 &%2^\"\"6^7_/\xA2#2\x91\"\"6\x917\x92.\" &\"/\x8E$2\x91\"\"6\x917\x92.\" &\"/z$2\x91\"\"6\x917\x92.\" &\"/f$2\x91\"\"6\x917\x92.\" &\"/R$4\u0108\"\"5!7\u0109/C$2`\"\"6`7a.) &4b\"\"5!7c.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u010A\"\"5\"7\u010B/& 8!:\u010C! )"),
          peg$decode("<%$;A0#*;A&/,#;G/#$+\")(\"'#&'#=.\" 7\u010D"),
          peg$decode("<%$;A0#*;A&/2#2\u010F\"\"6\u010F7\u0110/#$+\")(\"'#&'#=.\" 7\u010E"),
          peg$decode("<%$;A0#*;A&/2#2\u0112\"\"6\u01127\u0113/#$+\")(\"'#&'#=.\" 7\u0111"),
          peg$decode("<%$;A0#*;A&/2#2\u0115\"\"6\u01157\u0116/#$+\")(\"'#&'#=.\" 7\u0114"),
          peg$decode("<%$;A0#*;A&/2#2\u0118\"\"6\u01187\u0119/#$+\")(\"'#&'#=.\" 7\u0117"),
          peg$decode("<%$;A0#*;A&/1#;E/($8\":\u011B\"! )(\"'#&'#=.\" 7\u011A"),
          peg$decode("<%$;A0#*;A&/1#;B/($8\":\u011D\"! )(\"'#&'#=.\" 7\u011C"),
          peg$decode("<%$;A0#*;A&/@#2\u011F\"\"6\u011F7\u0120/1$;C/($8#:\u0121#! )(#'#(\"'#&'#=.\" 7\u011E"),
          peg$decode("<%$;A0#*;A&/h#2\u0123\"\"6\u01237\u0124/Y$;P/P$;S/G$;V/>$;U/5$;W/,$;Y/#$+()(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0122"),
          peg$decode("<%$;A0#*;A&/V#2\u0123\"\"6\u01237\u0124/G$;V/>$;J/5$;N/,$;M/#$+&)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0125"),
          peg$decode("<%$;A0#*;A&/_#2\u0123\"\"6\u01237\u0124/P$;S/G$;M/>$;L/5$;P/,$;J/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0126"),
          peg$decode("<%$;A0#*;A&/2#2\u0128\"\"6\u01287\u0129/#$+\")(\"'#&'#=.\" 7\u0127"),
          peg$decode("<%$;A0#*;A&/\x9F#2\u012B\"\"6\u012B7\u012C/\x90$$;G.# &;A0)*;G.# &;A&/t$;P/k$;S/b$;V/Y$;U/P$;W/G$;Y/>$;J/5$;T/,$;Y/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u012A"),
          peg$decode("<%$;A0#*;A&/C#;D/:$;M/1$;S/($8$:\u012E$!\")($'#(#'#(\"'#&'#=.\" 7\u012D"),
          peg$decode("<%$;A0#*;A&/C#;D/:$;M/1$;[/($8$:\u012F$!\")($'#(#'#(\"'#&'#=.\" 7\u012D"),
          peg$decode("<%$;A0#*;A&/C#;D/:$;V/1$;[/($8$:\u0130$!\")($'#(#'#(\"'#&'#.\u0130 &%$;A0#*;A&/C#;D/:$;K/1$;S/($8$:\u0131$!\")($'#(#'#(\"'#&'#.\xF9 &%$;A0#*;A&/C#;D/:$;S/1$;S/($8$:\u0132$!\")($'#(#'#(\"'#&'#.\xC2 &%$;A0#*;A&/C#;D/:$;P/1$;T/($8$:\u0133$!\")($'#(#'#(\"'#&'#.\x8B &%$;A0#*;A&/C#;D/:$;V/1$;Y/($8$:\u0134$!\")($'#(#'#(\"'#&'#.T &%$;A0#*;A&/C#;D/:$;V/1$;K/($8$:\u0135$!\")($'#(#'#(\"'#&'#=.\" 7\u012D"),
          peg$decode("<%$;A0#*;A&/L#;D/C$;L/:$;M/1$;N/($8%:\u0137%!#)(%'#($'#(#'#(\"'#&'#.\xA6 &%$;A0#*;A&/L#;D/C$;W/:$;J/1$;L/($8%:\u0138%!#)(%'#($'#(#'#(\"'#&'#.f &%$;A0#*;A&/U#;D/L$;N/C$;W/:$;J/1$;L/($8&:\u0139&!$)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0136"),
          peg$decode("<%$;A0#*;A&/C#;D/:$;S/1$;X/($8$:\u013B$!\")($'#(#'#(\"'#&'#.K &%$;A0#*;A&/:#;D/1$;X/($8#:\u013C#!!)(#'#(\"'#&'#=.\" 7\u013A"),
          peg$decode("<%$;A0#*;A&/C#;D/:$;O/1$;\\/($8$:\u013E$!\")($'#(#'#(\"'#&'#.] &%$;A0#*;A&/L#;D/C$;Q/:$;O/1$;\\/($8%:\u013F%!#)(%'#($'#(#'#(\"'#&'#=.\" 7\u013D"),
          peg$decode("<%$;A0#*;A&/@#;D/7$2\u0141\"\"6\u01417\u0142/($8#:\u0143#!!)(#'#(\"'#&'#=.\" 7\u0140"),
          peg$decode("<%$;A0#*;A&/1#;D/($8\":\u0145\"! )(\"'#&'#=.\" 7\u0144"),
          peg$decode("<%$;A0#*;A&/|#;Z/s$;W/j$;R/a$3\u0147\"\"5!7\u0148/R$;H/I$;E/@$;H/7$2O\"\"6O7P/($8):\u0149)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%$;A0#*;A&/|#;Z/s$;W/j$;R/a$3\u0147\"\"5!7\u0148/R$;H/I$;F/@$;H/7$2O\"\"6O7P/($8):\u0149)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0146"),
          peg$decode("<%$;A0#*;A&/@#;B/7$2\u0147\"\"6\u01477\u014B/($8#:-#!!)(#'#(\"'#&'#=.\" 7\u014A")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      function extractOptional(optional, index) {
        return optional ? optional[index] : null;
      }

      function extractList(list, index) {
        return list.map(function(element) { return element[index]; });
      }

      function buildList(head, tail, index) {
        return [head].concat(extractList(tail, index))
          .filter(function(element) { return element !== null; });
      }

      function buildExpression(head, tail) {
        return tail.reduce(function(result, element) {
          return {
            type: "Expression",
            operator: element[0],
            left: result,
            right: element[1]
          };
        }, head);
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})));